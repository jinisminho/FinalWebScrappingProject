/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package db;

import autogenerated.entities.audio46.products.Product;
import autogenerated.entities.audio46.products.Products;
import autogenerated.entities.signatures.Signature;
import business.Categorizer;
import db.daos.ProductDAO;
import entities.ProductEntity;
import enums.DbMessageEnum;
import enums.FileNameEnums;
import enums.ProductImgUrlEnums;
import enums.ProductTypeEnums;
import java.util.ArrayList;
import java.util.List;
import jaxb.JAXBUnmarshaller;

/**
 *
 * @author Hoang Pham
 */
public class DbAccessor {

    private static final int headphoneTypeId = ProductTypeEnums.HEADPHONES.getTypeId();
    private static final int iemTypeId = ProductTypeEnums.IEMS_INEARS.getTypeId();

//    OLD
    private boolean insertHeadphones() {
        boolean allSuccess = true;
        JAXBUnmarshaller jAXBUnmarshaller = new JAXBUnmarshaller();
        List<Signature> list = jAXBUnmarshaller.getHeadphones(FileNameEnums.FINAL_SIGNATURES_XML.getFileName());
        ProductDAO dao = new ProductDAO();

        int categoryId;
        int errorCount = 0;
        for (Signature signature : list) {
            Categorizer categorizer = new Categorizer();
            categoryId = categorizer.getCategoryOfSignature(signature.getName());
            String message = dao.insertSignature(signature, categoryId, headphoneTypeId);
            if (!message.equals(DbMessageEnum.SUCCESS.getMessage())) {
                System.out.println(message);
                allSuccess = false;
                errorCount++;
            }
        }
        if (errorCount == list.size()) {
            System.out.println("!!! Failed to insert any item");
        } else if (!allSuccess) {
            System.out.println("!!! Some item(s) were failed to be inserted");
        }
        if (allSuccess) {
            System.out.println(">> Every item is inserted successfully");
        }
        return allSuccess;
    }

//    OLD
    private boolean insertIems() {
        boolean allSuccess = true;
        JAXBUnmarshaller jAXBUnmarshaller = new JAXBUnmarshaller();
        List<Signature> list = jAXBUnmarshaller.getIems(FileNameEnums.FINAL_SIGNATURES_XML.getFileName());
        ProductDAO dao = new ProductDAO();

        int categoryId;
        int errorCount = 0;
        for (Signature signature : list) {
            Categorizer categorizer = new Categorizer();
            categoryId = categorizer.getCategoryOfSignature(signature.getName());
            String message = dao.insertSignature(signature, categoryId, iemTypeId);
            if (!message.equals(DbMessageEnum.SUCCESS.getMessage())) {
                System.out.println(message);
                allSuccess = false;
                errorCount++;
            }
        }
        if (errorCount == list.size()) {
            System.out.println("!!! Failed to insert any item");
        } else if (!allSuccess) {
            System.out.println("!!! Some item(s) were failed to be inserted");
        }
        if (allSuccess) {
            System.out.println(">> Every item is inserted successfully");
        }
        return allSuccess;
    }

    public boolean insertCompleteProducts() {
        int errorCount = 0;
        boolean allSuccess = true;
        List<ProductEntity> list = getCombinedList();
        ProductDAO dao = new ProductDAO();
        for (ProductEntity productEntity : list) {
            System.out.println("Inserting: " + productEntity.getName());
            String errorMessage = dao.insertCombinedSignatureProducts(productEntity);
            if (!errorMessage.equals(DbMessageEnum.SUCCESS.getMessage())) {
                allSuccess = false;
                System.out.println(errorMessage);
                errorCount++;
            }
        }
        if (errorCount == list.size()) {
            System.out.println("!!! Failed to insert any item");
        } else if (!allSuccess) {
            System.out.println("!!! Some item(s) were failed to be inserted");
        }
        if (allSuccess) {
            System.out.println(">> Every item is inserted successfully");
        }
        return allSuccess;
    }

    private List<ProductEntity> getCombinedList() {
        List<ProductEntity> finalList = new ArrayList<>();

//        Utils
        JAXBUnmarshaller unmarshaller = new JAXBUnmarshaller();
        Categorizer categorizer = new Categorizer();
//        Signatures
        List<autogenerated.entities.signatures.Signature> listHeadphonesSignature = unmarshaller.getHeadphones(FileNameEnums.FINAL_SIGNATURES_XML.getFileName());
        List<autogenerated.entities.signatures.Signature> listIemsSignature = unmarshaller.getIems(FileNameEnums.FINAL_SIGNATURES_XML.getFileName());
        List<Signature> combinedSignatures = new ArrayList<>();
        combinedSignatures.addAll(listHeadphonesSignature);
        combinedSignatures.addAll(listIemsSignature);
//        Products
        Products audio46Products = unmarshaller.getAudio46Products(FileNameEnums.FINAL_PRODUCTS_AUDIO46_XML.getFileName());
        List<Product> audio46Headphones = audio46Products.getHeadphones().getProduct();
        List<Product> audio46Earphones = audio46Products.getEarphones().getProduct();
        List<Product> combinedProducts = new ArrayList<>();
        combinedProducts.addAll(audio46Headphones);
        combinedProducts.addAll(audio46Earphones);
//        Check duplicate
        List<String> addedProducts = new ArrayList<>();
        boolean added = false;
        int numUpdated = 0;
        int numAddedNew = 0;

        ProductEntity entity;
        for (int i = 0; i < listIemsSignature.size(); i++) {
            int matchedOld = -1;
            int matchedNew = -1;
            added = false;
            entity = new ProductEntity();
            entity.setName(listIemsSignature.get(i).getModel());
            entity.setDescription(listIemsSignature.get(i).getDescription());
            entity.setCategoryId(categorizer.getCategoryOfSignature(listIemsSignature.get(i).getName()));
            entity.setDescription(listIemsSignature.get(i).getDescription());
            entity.setSignature(listIemsSignature.get(i).getName());
            entity.setPrice(listIemsSignature.get(i).getPrice());
            entity.setImgUrl(ProductImgUrlEnums.EARPHONES_URL.getURL());
            entity.setTypeId(ProductTypeEnums.IEMS_INEARS.getTypeId());

            for (int j = 0; j < combinedProducts.size(); j++) {
                boolean matched = true;
                String[] words = entity.getName().split("[ -.\"/]+");
                for (String word : words) {

                    if (!combinedProducts.get(j).getName().contains(word)) {
                        matched = false;
                    }
                }
                if (matched) {
                    if (combinedProducts.get(j).getName().toLowerCase().contains("open box")) {
                        matchedOld = j;
                    } else {
                        matchedNew = j;
                    }
                }
                if (matchedOld != -1 && matchedNew != -1) {
                    break;
                }
            }
            if (matchedOld != -1) {
                entity = new ProductEntity();
                entity.setDescription(listIemsSignature.get(i).getDescription());
                entity.setCategoryId(categorizer.getCategoryOfSignature(listIemsSignature.get(i).getName()));
                entity.setSignature(listIemsSignature.get(i).getName());
                entity.setName(combinedProducts.get(matchedOld).getName());
                entity.setPrice(combinedProducts.get(matchedOld).getPrice());
                entity.setImgUrl(combinedProducts.get(matchedOld).getImage());
                entity.setTypeId(ProductTypeEnums.IEMS_INEARS.getTypeId());
                finalList.add(entity);
                addedProducts.add(combinedProducts.get(matchedOld).getName());
                added = true;
                numUpdated++;
            }
            if (matchedNew != -1) {
                entity = new ProductEntity();
                entity.setDescription(listIemsSignature.get(i).getDescription());
                entity.setCategoryId(categorizer.getCategoryOfSignature(listIemsSignature.get(i).getName()));
                entity.setSignature(listIemsSignature.get(i).getName());
                entity.setName(combinedProducts.get(matchedNew).getName());
                entity.setPrice(combinedProducts.get(matchedNew).getPrice());
                entity.setImgUrl(combinedProducts.get(matchedNew).getImage());
                entity.setTypeId(ProductTypeEnums.IEMS_INEARS.getTypeId());
                finalList.add(entity);
                addedProducts.add(combinedProducts.get(matchedNew).getName());
                added = true;
                numUpdated++;

            }
            if (!added) {
                finalList.add(entity);
                numAddedNew++;
            }
        }

        for (int i = 0; i < listHeadphonesSignature.size(); i++) {
            int matchedOld = -1;
            int matchedNew = -1;
            added = false;
            entity = new ProductEntity();
            entity.setName(listHeadphonesSignature.get(i).getModel());
            entity.setDescription(listHeadphonesSignature.get(i).getDescription());
            entity.setCategoryId(categorizer.getCategoryOfSignature(listHeadphonesSignature.get(i).getName()));
            entity.setDescription(listHeadphonesSignature.get(i).getDescription());
            entity.setSignature(listHeadphonesSignature.get(i).getName());
            entity.setPrice(listHeadphonesSignature.get(i).getPrice());
            entity.setImgUrl(ProductImgUrlEnums.HEADPHONES_URL.getURL());
            entity.setTypeId(ProductTypeEnums.HEADPHONES.getTypeId());

            for (int j = 0; j < combinedProducts.size(); j++) {
                boolean matched = true;
                String[] words = entity.getName().split("[ -.\"/]+");
                for (String word : words) {

                    if (!combinedProducts.get(j).getName().contains(word)) {
                        matched = false;
                    }
                }
                if (matched) {
                    if (combinedProducts.get(j).getName().toLowerCase().contains("open box")) {
                        matchedOld = j;
                    } else {
                        matchedNew = j;
                    }
                }
                if (matchedOld != -1 && matchedNew != -1) {
                    break;
                }
            }
            if (matchedOld != -1) {
                entity = new ProductEntity();
                entity.setDescription(listHeadphonesSignature.get(i).getDescription());
                entity.setCategoryId(categorizer.getCategoryOfSignature(listHeadphonesSignature.get(i).getName()));
                entity.setSignature(listHeadphonesSignature.get(i).getName());
                entity.setName(combinedProducts.get(matchedOld).getName());
                entity.setPrice(combinedProducts.get(matchedOld).getPrice());
                entity.setImgUrl(combinedProducts.get(matchedOld).getImage());
                entity.setTypeId(ProductTypeEnums.HEADPHONES.getTypeId());
                finalList.add(entity);
                addedProducts.add(combinedProducts.get(matchedOld).getName());
                added = true;
                numUpdated++;
            }
            if (matchedNew != -1) {
                entity = new ProductEntity();
                entity.setDescription(listHeadphonesSignature.get(i).getDescription());
                entity.setCategoryId(categorizer.getCategoryOfSignature(listHeadphonesSignature.get(i).getName()));
                entity.setSignature(listHeadphonesSignature.get(i).getName());
                entity.setName(combinedProducts.get(matchedNew).getName());
                entity.setPrice(combinedProducts.get(matchedNew).getPrice());
                entity.setImgUrl(combinedProducts.get(matchedNew).getImage());
                entity.setTypeId(ProductTypeEnums.HEADPHONES.getTypeId());
                finalList.add(entity);
                addedProducts.add(combinedProducts.get(matchedNew).getName());
                added = true;
                numUpdated++;

            }
            if (!added) {
                finalList.add(entity);
                numAddedNew++;
            }
        }

        for (Product audio46Headphone : audio46Headphones) {
            if (!addedProducts.contains(audio46Headphone.getName())) {
                entity = new ProductEntity();
                entity.setCategoryId(7);
                entity.setDescription("N/A");
                entity.setImgUrl(audio46Headphone.getImage());
                entity.setName(audio46Headphone.getName());
                entity.setPrice(audio46Headphone.getPrice());
                entity.setTypeId(ProductTypeEnums.HEADPHONES.getTypeId());
                finalList.add(entity);
                addedProducts.add(audio46Headphone.getName());
                numAddedNew++;
            }
        }

        for (Product audio46Earphone : audio46Earphones) {
            if (!addedProducts.contains(audio46Earphone.getName())) {
                entity = new ProductEntity();
                entity.setCategoryId(7);
                entity.setDescription("N/A");
                entity.setImgUrl(audio46Earphone.getImage());
                entity.setName(audio46Earphone.getName());
                entity.setPrice(audio46Earphone.getPrice());
                entity.setTypeId(ProductTypeEnums.IEMS_INEARS.getTypeId());
                finalList.add(entity);
                addedProducts.add(audio46Earphone.getName());
                numAddedNew++;
            }
        }
        return finalList;
    }
}
