/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package db.daos;

import autogenerated.entities.signatures.Signature;
import db.MyConnection;
import entities.ProductEntity;
import enums.DbMessageEnum;
import enums.ProductImgUrlEnums;
import enums.ProductTypeEnums;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;

/**
 *
 * @author Hoang Pham
 */
public class ProductDAO {

    public ProductDAO() {
    }

    private Connection connection;
    private PreparedStatement preparedStatement;
    private ResultSet resultSet;

    private void closeConnection() {
        try {
            if (resultSet != null) {
                resultSet.close();
            }
            if (preparedStatement != null) {
                preparedStatement.close();
            }
            if (connection != null) {
                connection.close();
            }
        } catch (Exception e) {
            System.out.println("Failed to close connection: " + e.getMessage());
        }
    }

//    public boolean insertProduct(ProductEntity entity) {
//        boolean isInserted = false;
//        try {
//            String sql = "Insert into products"
//                    + "(name, price, description, signature, type_id, category_id) "
//                    + "values(?,?,?,?,?,?)";
//            connection = MyConnection.getMyConnection();
//            preparedStatement = connection.prepareStatement(sql);
//            preparedStatement.setString(1, entity.getName());
//            preparedStatement.setDouble(2, entity.getPrice());
//            preparedStatement.setString(3, entity.getDescription());
//            preparedStatement.setString(4, entity.getSignature());
//            preparedStatement.setInt(5, entity.getTypeId());
//            preparedStatement.setInt(6, entity.getCategoryId());
//            isInserted = preparedStatement.executeUpdate() > 0;
//            System.out.println("Inserted");
//        } catch (Exception ex) {
//            System.out.println("Failed to insert product into DB: " + ex.getMessage());
//            ex.printStackTrace();
//        } finally {
//            closeConnection();
//        }
//        return isInserted;
//    }
    public String insertSignature(Signature signature, int categoryId, int typeId) {
        String message = DbMessageEnum.SUCCESS.getMessage();
        ProductEntity entity = new ProductEntity();
        entity.setName(signature.getModel());
        entity.setSignature(signature.getName());
        entity.setDescription(signature.getDescription());
        entity.setTypeId(typeId);
        entity.setCategoryId(categoryId);
        entity.setPrice(signature.getPrice());
        if (typeId == ProductTypeEnums.HEADPHONES.getTypeId()) {
            entity.setImgUrl(ProductImgUrlEnums.HEADPHONES_URL.getURL());
        } else if (typeId == ProductTypeEnums.IEMS_INEARS.getTypeId()) {
            entity.setImgUrl(ProductImgUrlEnums.EARPHONES_URL.getURL());
        }
        try {
            String sql = "Insert into products"
                    + "(name, price, description, signature, type_id, category_id, img_url) "
                    + "values(?,?,?,?,?,?,?)";
            connection = MyConnection.getMyConnection();
            preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setString(1, entity.getName());
            preparedStatement.setDouble(2, entity.getPrice());
            preparedStatement.setString(3, entity.getDescription());
            preparedStatement.setString(4, entity.getSignature());
            preparedStatement.setInt(5, entity.getTypeId());
            preparedStatement.setInt(6, entity.getCategoryId());
            preparedStatement.setString(7, entity.getImgUrl());
            if (preparedStatement.executeUpdate() <= 0) {
                message = "Error at item: " + signature.getModel();
            }
        } catch (Exception ex) {
            message = "!!! Failed to insert product [" + signature.getModel()
                    + "] into DB: " + ex.getMessage();
        } finally {
            closeConnection();
        }
        return message;
    }

    public String insertCombinedSignatureProducts(ProductEntity entity) {
        String message = DbMessageEnum.SUCCESS.getMessage();
        try {
            String sql = "Insert into products"
                    + "(name, price, description, signature, type_id, category_id, img_url) "
                    + "values(?,?,?,?,?,?,?)";
            connection = MyConnection.getMyConnection();
            preparedStatement = connection.prepareStatement(sql);
            preparedStatement.setString(1, entity.getName());
            preparedStatement.setDouble(2, entity.getPrice());
            preparedStatement.setString(3, entity.getDescription());
            preparedStatement.setString(4, entity.getSignature());
            preparedStatement.setInt(5, entity.getTypeId());
            preparedStatement.setInt(6, entity.getCategoryId());
            preparedStatement.setString(7, entity.getImgUrl());
            if (preparedStatement.executeUpdate() <= 0) {
                message = "Error at item: " + entity.getName();
            }
        } catch (Exception ex) {
            message = "!!! Failed to insert product [" + entity.getName()
                    + "] into DB: " + ex.getMessage();
        } finally {
            closeConnection();
        }
        return message;
    }
}
