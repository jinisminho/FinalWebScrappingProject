/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package crawlers;

import autogenerated.entities.audio46.links.products.Links;
import enums.FileNameEnums;
import enums.SchemaEnums;
import enums.UrlEnums;
import enums.XsltFileEnums;
import html.WebPageDownloader;
import java.util.List;
import jaxb.JAXBUnmarshaller;
import parsers.MyXMLParser;
import transformers.MyXSLTransformer;
import validators.MyXMLValiditor;

/**
 *
 * @author Hoang Pham
 */
public class Audio46Crawler {

    private static WebPageDownloader webPageDownloader;
    private static MyXMLParser xmlParser;
    private static MyXSLTransformer transformer;
    private static MyXMLValiditor validator;
    private static JAXBUnmarshaller unmarshaller;

    private final String rootUrl = UrlEnums.AUDIO46.getUrl();
//    collection links
    private final String downloadedCollections
            = FileNameEnums.DOWNLOADED_COLLECTIONS_LINK_AUDIO46_XML.getFileName();
    private final String finalCollectionXml
            = FileNameEnums.FINAL_COLLECTIONS_LINK_AUDIO46_XML.getFileName();
    private final String collectionsXslt = XsltFileEnums.AUDIO46_COLLECTION_LINKS_XSLT.getFileName();
    private final String collectionsSchema = SchemaEnums.AUDIO46_COLLECTION_LINKS_SCHEMA.getFileName();
//    product links
    private final String downloadedProductsLinks
            = FileNameEnums.DOWNLOADED_PRODUCTS_LINKS_AUDIO46_XML.getFileName();
    private final String finalProductLinksXml
            = FileNameEnums.FINAL_PRODUCTS_LINKS_AUDIO46_XML.getFileName();
    private final String productLinksXslt = XsltFileEnums.AUDIO46_PRODUCTS_LINKS_XSLT.getFileName();
    private final String productLinksSchema = SchemaEnums.AUDIO46_PRODUCTS_LINKS_SCHEMA.getFileName();
//    product links
    private final String downloadedProducts
            = FileNameEnums.DOWNLOADED_PRODUCTS_AUDIO46_XML.getFileName();
    private final String finalProductXml
            = FileNameEnums.FINAL_PRODUCTS_AUDIO46_XML.getFileName();
    private final String productXslt = XsltFileEnums.AUDIO46_PRODUCTS_XSLT.getFileName();
    private final String productSchema = SchemaEnums.AUDIO46_PRODUCTS_SCHEMA.getFileName();

    public boolean crawl() {
        if (crawlCollectionLinks()) {
            if (crawlProductLinks()) {
                return crawlProducts();
            }
        }
        return false;
    }

    private boolean crawlCollectionLinks() {
        System.out.println(">> Init crawl collections links");
        webPageDownloader = new WebPageDownloader();
//        Download URL contents and write contents to an xml file
        boolean isWritten2File = webPageDownloader.
                writeAudio46CollectionsLinkList2Xml(rootUrl, downloadedCollections);
        if (isWritten2File) {
//            Check if written xml is well formed
            xmlParser = new MyXMLParser();
            boolean isWellformed = xmlParser.checkWellFormedXml(downloadedCollections);
            if (isWellformed) {
//                Transform into usable xml
                transformer = new MyXSLTransformer();
                boolean isTransformed
                        = transformer.transform(downloadedCollections, finalCollectionXml, collectionsXslt);
                if (isTransformed) {
//                    Validate xml
                    validator = new MyXMLValiditor();
                    return validator.validateXMLWithSchema(finalCollectionXml, collectionsSchema);
                }
            }
        }
        return false;
    }

    private boolean crawlProductLinks() {
        System.out.println(">> Init crawl product links");
//        Get urls from xml file
        unmarshaller = new JAXBUnmarshaller();
        List<String> urls = unmarshaller.getAudio46CollectionLinks(finalCollectionXml);
        webPageDownloader = new WebPageDownloader();
//        Download URL contents and write contents to an xml file
        boolean isWritten2File = webPageDownloader.
                writeAudio46ProductLinks2Xml(urls, downloadedProductsLinks);
        if (isWritten2File) {
//            Check if written xml is well formed
            xmlParser = new MyXMLParser();
            boolean isWellformed = xmlParser.checkWellFormedXml(downloadedProductsLinks);
            if (isWellformed) {
//                Transform into usable xml
                transformer = new MyXSLTransformer();
                boolean isTransformed
                        = transformer.transform(downloadedProductsLinks, finalProductLinksXml, productLinksXslt);
                if (isTransformed) {
//                    Validate xml
                    validator = new MyXMLValiditor();
                    return validator.validateXMLWithSchema(finalProductLinksXml, productLinksSchema);
                }
            }
        }
        return false;
    }

    private boolean crawlProducts() {
        System.out.println(">> Init crawl products");
//        Get urls from xml file
        unmarshaller = new JAXBUnmarshaller();
        Links links = unmarshaller.getAudio46ProductLinks(finalProductLinksXml);
        webPageDownloader = new WebPageDownloader();
//        Download URL contents and write contents to an xml file
        return webPageDownloader.
                writeAudio46Products2Xml(links, downloadedProducts);
    }

    private boolean processProductXml() {

//            Check if written xml is well formed
        xmlParser = new MyXMLParser();
        boolean isWellformed = xmlParser.checkWellFormedXml(downloadedProducts);
        if (isWellformed) {
//                Transform into usable xml
            transformer = new MyXSLTransformer();
            boolean isTransformed
                    = transformer.transform(downloadedProducts, finalProductXml, productXslt);
            if (isTransformed) {
//                    Validate xml
                validator = new MyXMLValiditor();
                return validator.validateXMLWithSchema(finalProductXml, productSchema);
            }
        }

        return false;
    }

    public void demo() {
//        crawlProducts();
        processProductXml();
    }
}
