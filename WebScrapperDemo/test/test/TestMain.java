/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package test;

import autogenerated.entities.audio46.products.Product;
import autogenerated.entities.audio46.products.Products;
import autogenerated.entities.signatures.Signature;
import business.Categorizer;
import com.sun.org.apache.xalan.internal.xsltc.compiler.util.StringStack;
import crawlers.Audio46Crawler;
import entities.ProductEntity;
import enums.FileNameEnums;
import enums.ProductImgUrlEnums;
import enums.ProductTypeEnums;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import jaxb.JAXBUnmarshaller;

/**
 *
 * @author Hoang Pham
 */
public class TestMain {

    public static double similarity(String s1, String s2) {
        String longer = s1.trim(), shorter = s2.trim();
        if (s1.length() < s2.length()) { // longer should always have greater length
            longer = s2;
            shorter = s1;
        }
        int longerLength = longer.length();
        if (longerLength == 0) {
            return -1.0;
            /* both strings are zero length */ }
        /* // If you have Apache Commons Text, you can use it to calculate the edit distance:
    LevenshteinDistance levenshteinDistance = new LevenshteinDistance();
    return (longerLength - levenshteinDistance.apply(longer, shorter)) / (double) longerLength; */
        return (longerLength - editDistance(longer, shorter)) / (double) longerLength;

    }

    // Example implementation of the Levenshtein Edit Distance
    // See http://rosettacode.org/wiki/Levenshtein_distance#Java
    public static int editDistance(String s1, String s2) {
        s1 = s1.toLowerCase();
        s2 = s2.toLowerCase();

        int[] costs = new int[s2.length() + 1];
//        System.out.println(s1.length());
//        System.out.println(s2.length());
//        System.out.println(costs.length);
        for (int i = 0; i <= s1.length(); i++) {
            int lastValue = i;
            for (int j = 0; j <= s2.length(); j++) {
                if (i == 0) {
                    costs[j] = j;
                } else {
                    if (j > 0) {
                        int newValue = costs[j - 1];
                        if (s1.charAt(i - 1) != s2.charAt(j - 1)) {
                            newValue = Math.min(Math.min(newValue, lastValue),
                                    costs[j]) + 1;
                        }
                        costs[j - 1] = lastValue;
                        lastValue = newValue;
                    }
                }
            }
            if (i > 0) {
                costs[s2.length()] = lastValue;
            }
        }
        return costs[s2.length()];
    }

    public static void printSimilarity(String s, String t) {
        System.out.println(String.format(
                "%.3f is the similarity between \"%s\" and \"%s\"", similarity(s, t), s, t));
    }

    public static void main(String[] args) {
        getCombinedList();
        //        String s = "(Open box)";
        //        String s2 = "open box";
        //        System.out.println(s.toLowerCase().contains("open box"));
    }

    static private List<ProductEntity> getCombinedList() {
        List<ProductEntity> finalList = new ArrayList<>();

//        Utils
        JAXBUnmarshaller unmarshaller = new JAXBUnmarshaller();
        Categorizer categorizer = new Categorizer();
//        Signatures
        List<autogenerated.entities.signatures.Signature> listHeadphonesSignature = unmarshaller.getHeadphones(FileNameEnums.FINAL_SIGNATURES_XML.getFileName());
        List<autogenerated.entities.signatures.Signature> listIemsSignature = unmarshaller.getIems(FileNameEnums.FINAL_SIGNATURES_XML.getFileName());
        List<Signature> combinedSignatures = new ArrayList<>();
        combinedSignatures.addAll(listHeadphonesSignature);
        combinedSignatures.addAll(listIemsSignature);
//        Products
        Products audio46Products = unmarshaller.getAudio46Products(FileNameEnums.FINAL_PRODUCTS_AUDIO46_XML.getFileName());
        List<Product> audio46Headphones = audio46Products.getHeadphones().getProduct();
        List<Product> audio46Earphones = audio46Products.getEarphones().getProduct();
        List<Product> combinedProducts = new ArrayList<>();
        combinedProducts.addAll(audio46Headphones);
        combinedProducts.addAll(audio46Earphones);
//        Check duplicate
        List<String> addedProducts = new ArrayList<>();
        boolean added = false;
        int numUpdated = 0;
        int numAddedNew = 0;

        ProductEntity entity;
        for (int i = 0; i < listIemsSignature.size(); i++) {
            int matchedOld = -1;
            int matchedNew = -1;
            added = false;
            entity = new ProductEntity();
            entity.setName(listIemsSignature.get(i).getModel());
            entity.setDescription(listIemsSignature.get(i).getDescription());
            entity.setCategoryId(categorizer.getCategoryOfSignature(listIemsSignature.get(i).getName()));
            entity.setDescription(listIemsSignature.get(i).getDescription());
            entity.setSignature(listIemsSignature.get(i).getName());
            entity.setPrice(listIemsSignature.get(i).getPrice());
            entity.setImgUrl(ProductImgUrlEnums.EARPHONES_URL.getURL());
            entity.setTypeId(ProductTypeEnums.IEMS_INEARS.getTypeId());

            for (int j = 0; j < combinedProducts.size(); j++) {
                boolean matched = true;
                String[] words = entity.getName().split("[ -.\"/]+");
                for (String word : words) {

                    if (!combinedProducts.get(j).getName().contains(word)) {
                        matched = false;
                    }
                }
                if (matched) {
                    if (combinedProducts.get(j).getName().toLowerCase().contains("open box")) {
                        matchedOld = j;
                    } else {
                        matchedNew = j;
                    }
                }
                if (matchedOld != -1 && matchedNew != -1) {
                    break;
                }
            }
            if (matchedOld != -1) {
                entity = new ProductEntity();
                entity.setDescription(listIemsSignature.get(i).getDescription());
                entity.setCategoryId(categorizer.getCategoryOfSignature(listIemsSignature.get(i).getName()));
                entity.setSignature(listIemsSignature.get(i).getName());
                entity.setName(combinedProducts.get(matchedOld).getName());
                entity.setPrice(combinedProducts.get(matchedOld).getPrice());
                entity.setImgUrl(combinedProducts.get(matchedOld).getImage());
                entity.setTypeId(ProductTypeEnums.IEMS_INEARS.getTypeId());
                finalList.add(entity);
                addedProducts.add(combinedProducts.get(matchedOld).getName());
                added = true;
                numUpdated++;
            }
            if (matchedNew != -1) {
                entity = new ProductEntity();
                entity.setDescription(listIemsSignature.get(i).getDescription());
                entity.setCategoryId(categorizer.getCategoryOfSignature(listIemsSignature.get(i).getName()));
                entity.setSignature(listIemsSignature.get(i).getName());
                entity.setName(combinedProducts.get(matchedNew).getName());
                entity.setPrice(combinedProducts.get(matchedNew).getPrice());
                entity.setImgUrl(combinedProducts.get(matchedNew).getImage());
                entity.setTypeId(ProductTypeEnums.IEMS_INEARS.getTypeId());
                finalList.add(entity);
                addedProducts.add(combinedProducts.get(matchedNew).getName());
                added = true;
                numUpdated++;

            }
            if (!added) {
                finalList.add(entity);
                numAddedNew++;
            }
        }

        for (int i = 0; i < listHeadphonesSignature.size(); i++) {
            int matchedOld = -1;
            int matchedNew = -1;
            added = false;
            entity = new ProductEntity();
            entity.setName(listHeadphonesSignature.get(i).getModel());
            entity.setDescription(listHeadphonesSignature.get(i).getDescription());
            entity.setCategoryId(categorizer.getCategoryOfSignature(listHeadphonesSignature.get(i).getName()));
            entity.setDescription(listHeadphonesSignature.get(i).getDescription());
            entity.setSignature(listHeadphonesSignature.get(i).getName());
            entity.setPrice(listHeadphonesSignature.get(i).getPrice());
            entity.setImgUrl(ProductImgUrlEnums.HEADPHONES_URL.getURL());
            entity.setTypeId(ProductTypeEnums.HEADPHONES.getTypeId());

            for (int j = 0; j < combinedProducts.size(); j++) {
                boolean matched = true;
                String[] words = entity.getName().split("[ -.\"/]+");
                for (String word : words) {

                    if (!combinedProducts.get(j).getName().contains(word)) {
                        matched = false;
                    }
                }
                if (matched) {
                    if (combinedProducts.get(j).getName().toLowerCase().contains("open box")) {
                        matchedOld = j;
                    } else {
                        matchedNew = j;
                    }
                }
                if (matchedOld != -1 && matchedNew != -1) {
                    break;
                }
            }
            if (matchedOld != -1) {
                entity = new ProductEntity();
                entity.setDescription(listHeadphonesSignature.get(i).getDescription());
                entity.setCategoryId(categorizer.getCategoryOfSignature(listHeadphonesSignature.get(i).getName()));
                entity.setSignature(listHeadphonesSignature.get(i).getName());
                entity.setName(combinedProducts.get(matchedOld).getName());
                entity.setPrice(combinedProducts.get(matchedOld).getPrice());
                entity.setImgUrl(combinedProducts.get(matchedOld).getImage());
                entity.setTypeId(ProductTypeEnums.HEADPHONES.getTypeId());
                finalList.add(entity);
                addedProducts.add(combinedProducts.get(matchedOld).getName());
                added = true;
                numUpdated++;
            }
            if (matchedNew != -1) {
                entity = new ProductEntity();
                entity.setDescription(listHeadphonesSignature.get(i).getDescription());
                entity.setCategoryId(categorizer.getCategoryOfSignature(listHeadphonesSignature.get(i).getName()));
                entity.setSignature(listHeadphonesSignature.get(i).getName());
                entity.setName(combinedProducts.get(matchedNew).getName());
                entity.setPrice(combinedProducts.get(matchedNew).getPrice());
                entity.setImgUrl(combinedProducts.get(matchedNew).getImage());
                entity.setTypeId(ProductTypeEnums.HEADPHONES.getTypeId());
                finalList.add(entity);
                addedProducts.add(combinedProducts.get(matchedNew).getName());
                added = true;
                numUpdated++;

            }
            if (!added) {
                finalList.add(entity);
                numAddedNew++;
            }
        }

        for (Product audio46Headphone : audio46Headphones) {
            if (!addedProducts.contains(audio46Headphone.getName())) {
                entity = new ProductEntity();
                entity.setCategoryId(7);
                entity.setDescription("N/A");
                entity.setImgUrl(audio46Headphone.getImage());
                entity.setName(audio46Headphone.getName());
                entity.setPrice(audio46Headphone.getPrice());
                entity.setTypeId(ProductTypeEnums.HEADPHONES.getTypeId());
                finalList.add(entity);
                addedProducts.add(audio46Headphone.getName());
                numAddedNew++;
            }
        }

        for (Product audio46Earphone : audio46Earphones) {
            if (!addedProducts.contains(audio46Earphone.getName())) {
                entity = new ProductEntity();
                entity.setCategoryId(7);
                entity.setDescription("N/A");
                entity.setImgUrl(audio46Earphone.getImage());
                entity.setName(audio46Earphone.getName());
                entity.setPrice(audio46Earphone.getPrice());
                entity.setTypeId(ProductTypeEnums.IEMS_INEARS.getTypeId());
                finalList.add(entity);
                addedProducts.add(audio46Earphone.getName());
                numAddedNew++;
            }
        }

        System.out.println("Updated: " + numUpdated);
        System.out.println("Added: " + numAddedNew);

        return finalList;
    }

    private static void demo() {
        List<ProductEntity> finalList = new ArrayList<>();

//        Utils
        JAXBUnmarshaller unmarshaller = new JAXBUnmarshaller();
        Categorizer categorizer = new Categorizer();
//        Signatures
        List<autogenerated.entities.signatures.Signature> listHeadphonesSignature = unmarshaller.getHeadphones(FileNameEnums.FINAL_SIGNATURES_XML.getFileName());
        List<autogenerated.entities.signatures.Signature> listIemsSignature = unmarshaller.getIems(FileNameEnums.FINAL_SIGNATURES_XML.getFileName());
        List<Signature> combinedSignatures = new ArrayList<>();
        combinedSignatures.addAll(listHeadphonesSignature);
        combinedSignatures.addAll(listIemsSignature);
//        Products
        Products audio46Products = unmarshaller.getAudio46Products(FileNameEnums.FINAL_PRODUCTS_AUDIO46_XML.getFileName());
        List<Product> audio46Headphones = audio46Products.getHeadphones().getProduct();
        List<Product> audio46Earphones = audio46Products.getEarphones().getProduct();
        List<Product> combinedProducts = new ArrayList<>();
        combinedProducts.addAll(audio46Headphones);
        combinedProducts.addAll(audio46Earphones);
//        Check duplicate
        List<String> addedSignatures = new ArrayList<>();
        List<String> addedProducts = new ArrayList<>();
        boolean added = false;
        ;
//        item from products list that matches an item from signatures list
        List<Integer> allMatchedProducts = new ArrayList<>();

        int numUpdated = 0;
        int numAddedNew = 0;

        System.out.println("======================= Product Entity list");
        ProductEntity entity;
        for (int i = 0; i < listIemsSignature.size(); i++) {
            int matchedOld = -1;
            int matchedNew = -1;
            added = false;
            entity = new ProductEntity();
            entity.setName(combinedSignatures.get(i).getModel());
            entity.setDescription(combinedSignatures.get(i).getDescription());
            entity.setCategoryId(categorizer.getCategoryOfSignature(combinedSignatures.get(i).getName()));
            entity.setDescription(combinedSignatures.get(i).getDescription());
            entity.setSignature(combinedSignatures.get(i).getName());
            entity.setPrice(combinedSignatures.get(i).getPrice());
            entity.setImgUrl(ProductImgUrlEnums.EARPHONES_URL.getURL());
            entity.setTypeId(ProductTypeEnums.IEMS_INEARS.getTypeId());

            for (int j = 0; j < combinedProducts.size(); j++) {
                boolean matched = true;
                String[] words = entity.getName().split("[ -.\"/]+");
                for (String word : words) {

                    if (!combinedProducts.get(j).getName().contains(word)) {
                        matched = false;
                    }
                }
                if (matched) {
//                    System.out.println("===============" + combinedProducts.get(j).getName());
                    if (combinedProducts.get(j).getName().toLowerCase().contains("open box")) {
                        matchedOld = j;
                    } else {
                        matchedNew = j;
                    }
                }
                if (matchedOld != -1 && matchedNew != -1) {
                    break;
                }
            }
            if (matchedOld != -1) {
                entity = new ProductEntity();
                entity.setDescription(combinedSignatures.get(i).getDescription());
                entity.setCategoryId(categorizer.getCategoryOfSignature(combinedSignatures.get(i).getName()));
                entity.setSignature(combinedSignatures.get(i).getName());
                entity.setName(combinedProducts.get(matchedOld).getName());
                entity.setPrice(combinedProducts.get(matchedOld).getPrice());
                entity.setImgUrl(combinedProducts.get(matchedOld).getImage());
                entity.setTypeId(ProductTypeEnums.IEMS_INEARS.getTypeId());
                finalList.add(entity);
                addedProducts.add(combinedProducts.get(matchedOld).getName());
                added = true;
                numUpdated++;
            }
            if (matchedNew != -1) {
                entity = new ProductEntity();
                entity.setDescription(combinedSignatures.get(i).getDescription());
                entity.setCategoryId(categorizer.getCategoryOfSignature(combinedSignatures.get(i).getName()));
                entity.setSignature(combinedSignatures.get(i).getName());
                entity.setName(combinedProducts.get(matchedNew).getName());
                entity.setPrice(combinedProducts.get(matchedNew).getPrice());
                entity.setImgUrl(combinedProducts.get(matchedNew).getImage());
                entity.setTypeId(ProductTypeEnums.IEMS_INEARS.getTypeId());
                finalList.add(entity);
                addedProducts.add(combinedProducts.get(matchedNew).getName());
                added = true;
                numUpdated++;

            }
            if (!added) {
                finalList.add(entity);
                numAddedNew++;
            }
        }

        for (int i = 0; i < listHeadphonesSignature.size(); i++) {
            int matchedOld = -1;
            int matchedNew = -1;
            added = false;
            entity = new ProductEntity();
            entity.setName(combinedSignatures.get(i).getModel());
            entity.setDescription(combinedSignatures.get(i).getDescription());
            entity.setCategoryId(categorizer.getCategoryOfSignature(combinedSignatures.get(i).getName()));
            entity.setDescription(combinedSignatures.get(i).getDescription());
            entity.setSignature(combinedSignatures.get(i).getName());
            entity.setPrice(combinedSignatures.get(i).getPrice());
            entity.setImgUrl(ProductImgUrlEnums.HEADPHONES_URL.getURL());
            entity.setTypeId(ProductTypeEnums.HEADPHONES.getTypeId());

            for (int j = 0; j < combinedProducts.size(); j++) {
                boolean matched = true;
                String[] words = entity.getName().split("[ -.\"/]+");
                for (String word : words) {

                    if (!combinedProducts.get(j).getName().contains(word)) {
                        matched = false;
                    }
                }
                if (matched) {
//                    System.out.println("===============" + combinedProducts.get(j).getName());
                    if (combinedProducts.get(j).getName().toLowerCase().contains("open box")) {
                        matchedOld = j;
                    } else {
                        matchedNew = j;
                    }
                }
                if (matchedOld != -1 && matchedNew != -1) {
                    break;
                }
            }
            if (matchedOld != -1) {
                entity = new ProductEntity();
                entity.setDescription(combinedSignatures.get(i).getDescription());
                entity.setCategoryId(categorizer.getCategoryOfSignature(combinedSignatures.get(i).getName()));
                entity.setSignature(combinedSignatures.get(i).getName());
                entity.setName(combinedProducts.get(matchedOld).getName());
                entity.setPrice(combinedProducts.get(matchedOld).getPrice());
                entity.setImgUrl(combinedProducts.get(matchedOld).getImage());
                entity.setTypeId(ProductTypeEnums.HEADPHONES.getTypeId());
                finalList.add(entity);
                addedProducts.add(combinedProducts.get(matchedOld).getName());
                added = true;
                numUpdated++;
            }
            if (matchedNew != -1) {
                entity = new ProductEntity();
                entity.setDescription(combinedSignatures.get(i).getDescription());
                entity.setCategoryId(categorizer.getCategoryOfSignature(combinedSignatures.get(i).getName()));
                entity.setSignature(combinedSignatures.get(i).getName());
                entity.setName(combinedProducts.get(matchedNew).getName());
                entity.setPrice(combinedProducts.get(matchedNew).getPrice());
                entity.setImgUrl(combinedProducts.get(matchedNew).getImage());
                entity.setTypeId(ProductTypeEnums.HEADPHONES.getTypeId());
                finalList.add(entity);
                addedProducts.add(combinedProducts.get(matchedNew).getName());
                added = true;
                numUpdated++;

            }
            if (!added) {
                finalList.add(entity);
                numAddedNew++;
            }
        }

        for (Product audio46Headphone : audio46Headphones) {
            if (!addedProducts.contains(audio46Headphone.getName())) {
                entity = new ProductEntity();
                entity.setCategoryId(7);
                entity.setDescription("N/A");
                entity.setImgUrl(audio46Headphone.getImage());
                entity.setName(audio46Headphone.getName());
                entity.setPrice(audio46Headphone.getPrice());
                entity.setTypeId(ProductTypeEnums.HEADPHONES.getTypeId());
                finalList.add(entity);
                addedProducts.add(audio46Headphone.getName());
                numAddedNew++;
            }
        }

        for (Product audio46Earphone : audio46Earphones) {
            if (!addedProducts.contains(audio46Earphone.getName())) {
                entity = new ProductEntity();
                entity.setCategoryId(7);
                entity.setDescription("N/A");
                entity.setImgUrl(audio46Earphone.getImage());
                entity.setName(audio46Earphone.getName());
                entity.setPrice(audio46Earphone.getPrice());
                entity.setTypeId(ProductTypeEnums.IEMS_INEARS.getTypeId());
                finalList.add(entity);
                addedProducts.add(audio46Earphone.getName());
                numAddedNew++;
            }
        }
        int i = 1;
        System.out.println("======================= FINAL LIST");
        for (ProductEntity productEntity : finalList) {
//            productEntity.getName().toLowerCase().contains(String.valueOf("E4000").toLowerCase())
            if (true) {
                System.out.println((i) + ": Model: " + productEntity.getName());
                System.out.println((i) + ": Category: " + productEntity.getCategoryId());
                System.out.println((i) + ": Description: " + productEntity.getDescription());
                System.out.println((i) + ": IMG: " + productEntity.getImgUrl());
                System.out.println((i) + ": Price: " + productEntity.getPrice());
                System.out.println((i++) + ": Type: " + productEntity.getTypeId());
                System.out.println("=================================");

            }
        }
        System.out.println("=== Updated: " + numUpdated);
        System.out.println("=== Added: " + numAddedNew);
        System.out.println(finalList.size());
    }
}

//        for (int i = 0; i < listHeadphonesSignature.size(); i++) {
//            added = false;
//            entity = new ProductEntity();
//            entity.setName(combinedSignatures.get(i).getModel());
//            entity.setDescription(combinedSignatures.get(i).getDescription());
//            entity.setCategoryId(categorizer.getCategoryOfSignature(combinedSignatures.get(i).getName()));
//            entity.setDescription(combinedSignatures.get(i).getDescription());
//            entity.setSignature(combinedSignatures.get(i).getName());
//            entity.setPrice(combinedSignatures.get(i).getPrice());
//            entity.setImgUrl(ProductImgUrlEnums.HEADPHONES_URL.getURL());
//            entity.setTypeId(ProductTypeEnums.HEADPHONES.getTypeId());
//
//            for (int j = 0; j < combinedProducts.size(); j++) {
//                String[] words = entity.getName().split("[ -.\"/]+");
//                boolean matched = true;
//                boolean isSecondHand = false;
//                for (String word : words) {
//                    if (!combinedProducts.get(j).getName().toLowerCase().contains("open box")) {
//                        if (!combinedProducts.get(j).getName().contains(word)) {
//                            matched = false;
//                        }
//                    } else {
//                        if (!combinedProducts.get(j).getName().contains(word)) {
//                            matched = false;
//                        }
//                        if (matched) {
//                            isSecondHand = true;
//                        }
//                    }
//                }
//                if (matched && !isSecondHand && !addedProducts.contains(combinedProducts.get(j).getName()) && !addedSignatures.contains(entity.getName())) {
//                    entity.setPrice(combinedProducts.get(j).getPrice());
//                    entity.setImgUrl(combinedProducts.get(j).getImage());
//                    entity.setTypeId(ProductTypeEnums.HEADPHONES.getTypeId());
//                    finalList.add(entity);
//                    addedProducts.add(combinedProducts.get(j).getName());
//                    addedSignatures.add(entity.getName());
//                    added = true;
//                    numUpdated++;
//                } else if (matched && isSecondHand && !addedProducts.contains(combinedProducts.get(j).getName()) && !addedSignatures.contains(entity.getName() + " (2nd hand)")) {
//                    entity.setPrice(combinedProducts.get(j).getPrice());
//                    entity.setImgUrl(combinedProducts.get(j).getImage());
//                    entity.setTypeId(ProductTypeEnums.HEADPHONES.getTypeId());
//                    finalList.add(entity);
//                    addedProducts.add(combinedProducts.get(j).getName());
//                    addedSignatures.add(entity.getName());
//                    added = true;
//                    numUpdated++;
//                }
//            }
//            if (!added) {
//                finalList.add(entity);
//                numAddedNew++;
//            }
//        }
